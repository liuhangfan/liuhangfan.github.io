<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>leetcode 994. Rotting Oranges</title>
    <url>/2022/09/12/test/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="994-Rotting-Oranges"><a href="#994-Rotting-Oranges" class="headerlink" title="994. Rotting Oranges"></a>994. Rotting Oranges</h1><p><a href="https://leetcode.com/problems/rotting-oranges/">rotting-oranges</a></p>
<p>You are given an <code>m x n</code> <code>grid</code> where each cell can have one of three values:</p>
<ul>
<li><code>0</code> representing an empty cell,</li>
<li><code>1</code> representing a fresh orange, or</li>
<li><code>2</code> representing a rotten orange.</li>
</ul>
<p>Every minute, any fresh orange that is <strong>4-directionally adjacent</strong> to a rotten orange becomes rotten.</p>
<p>Return <em>the minimum number of minutes that must elapse until no cell has a fresh orange</em>. If <em>this is impossible, return</em> <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img  src="https://assets.leetcode.com/uploads/2019/02/16/oranges.png"  ><span class="image-caption">https://assets.leetcode.com/uploads/2019/02/16/oranges.png</span></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">Input: grid = <span class="hljs-string">[[2,1,1],[1,1,0],[0,1,1]]</span><br>Output: <span class="hljs-number">4</span><br><br></code></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: grid =<span class="hljs-meta"> [[2,1,1],[0,1,1],[1,0,1]]</span><br><span class="hljs-attribute">Output</span>: -<span class="hljs-number">1</span><br><span class="hljs-attribute">Explanation</span>: The orange in the bottom left corner (row <span class="hljs-number">2</span>, column <span class="hljs-number">0</span>) is never rotten, because rotting only happens <span class="hljs-number">4</span>-directionally.<br><br></code></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">Input: grid = <span class="hljs-string">[[0,2]]</span><br>Output: <span class="hljs-number">0</span><br>Explanation: Since there are already no fresh oranges at minute <span class="hljs-number">0</span>, the answer is just <span class="hljs-number">0.</span><br><br></code></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 10</code></li>
<li><code>grid[i][j]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Queue&lt;<span class="hljs-type">int</span>[]&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-type">boolean</span>[][] visited;<br>    <span class="hljs-type">int</span>[][] directions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>&#125;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">orangesRotting</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rotten</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minute</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> grid.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> grid[<span class="hljs-number">0</span>].length;<br>        visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[m][n];<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;grid.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;grid[<span class="hljs-number">0</span>].length;j++)&#123;<br>                <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">0</span>)&#123;<br>                    visited[i][j] = <span class="hljs-literal">true</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    total++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;grid.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;grid[<span class="hljs-number">0</span>].length;j++)&#123;<br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">2</span>)&#123;<br>                rotten ++;<br>                visited[i][j] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] dir : directions)&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">nextX</span> <span class="hljs-operator">=</span> i+dir[<span class="hljs-number">0</span>];<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">nextY</span> <span class="hljs-operator">=</span> j+dir[<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span>(isValid(nextX,nextY))&#123;<br>                        <span class="hljs-keyword">if</span> (grid[nextX][nextY] == <span class="hljs-number">1</span>)&#123;<br>                            stack.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;nextX,nextY&#125;);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> stack.size();<br>            rotten += len;<br>            minute++;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>                <span class="hljs-type">int</span>[] elem = stack.poll();<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] dir : directions)&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">nextX</span> <span class="hljs-operator">=</span> elem[<span class="hljs-number">0</span>]+dir[<span class="hljs-number">0</span>];<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">nextY</span> <span class="hljs-operator">=</span> elem[<span class="hljs-number">1</span>]+dir[<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span>(isValid(nextX,nextY))&#123;<br>                        <span class="hljs-keyword">if</span> (grid[nextX][nextY] == <span class="hljs-number">1</span>)&#123;<br>                            stack.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;nextX,nextY&#125;);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(total == rotten)&#123;<br>            <span class="hljs-keyword">return</span> minute;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-keyword">if</span> (x&lt;<span class="hljs-number">0</span> || y&lt;<span class="hljs-number">0</span> || x&gt;= visited.length || y &gt;= visited[<span class="hljs-number">0</span>].length || visited[x][y] == <span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        visited[x][y] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>BFS</tag>
        <tag>Matrix</tag>
        <tag>Array</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
</search>
